#!/bin/sh

usage() {
cat << _EOF_
Buildshim for Gnu Hello, a program that uses Gnu Automake as a build system
Usage:
    ./buildshim install_deps
    ./buildshim configure
    ./buildshim compile
    ./buildshim check
    ./buildshim package
    ./buildshim uninstall_deps
_EOF_
}

SRCFILE="`readlink $0 2>/dev/null || echo $0`"
SRC="`dirname $SRCFILE`"
SRC="`cd $SRC; pwd`"
. $SRC/../bs_funcs.sh

pkgname=hello

_os=`bs_detect_os`
version=`bs_get_version_configure_ac`
bs_platform_workarounds
bs_set_CC
ncores=`bs_detect_ncores`
parallel="-j$ncores -l$ncores"

echo "This is $pkgname version $version, building on $_os"

set -e
set -x

do_install_deps() {
    case $_os in
    cygwin)
        apt-cyg install gettext-devel
        ;;
    ubu*)
        sudo apt-get -y install autopoint texinfo

        if ! test -x /usr/local/bin/fpm
        then
            sudo apt-get install -y build-essential libopenssl-ruby ruby-dev rubygems
            # Need to set umask, or /var/lib/gems won't be world-readable
            # See https://bugs.launchpad.net/ubuntu/+source/rubygems/+bug/1023836
            umask 022
            sudo gem install fpm
            if ! test -x /usr/local/bin/fpm
            then
                if ! test -x /var/lib/gems/*/bin/fpm
                then
                    echo fpm failed to install
                    exit 1
                fi
                sudo ln -s /var/lib/gems/*/bin/fpm /usr/local/bin/fpm
            fi
        fi
        ;;
    osx*)
        sudo port install texinfo
        ;;
    *) bs_abort "Unsupported OS";;
    esac
}

do_configure() {
    ./bootstrap
    ./configure
}

do_compile() {
    make $parallel
}

do_check() {
    make $parallel check
}

do_package() {
    # In this example, we pretend Hello is a proprietary app that needs
    # to be built once as a portable binary, and packaged multiple times,
    # once in each supported package format.

    DESTDIR=../tmp/fpm-installroot.$$
    mkdir -p $DESTDIR
    DESTDIR=`cd $DESTDIR; pwd`
    make install DESTDIR=$DESTDIR

    case $_os in
    cygwin) echo "Here we would generate a cygwin package, or something :-)"
        ;;
    ubu*)
        # There are several ways to improve portability of Linux binaries;
        # the easiest one is to compile on an oldish Linux to make sure the
        # glibc you statically link to is no newer than on the target systems.
        # You may also want to use the LSB Application Checker to check for
        # portability problems.
        rm -f ${pkgname}*.deb || true
        fpm -s dir -t deb -n $pkgname -v $version -C $DESTDIR usr
        rm -f ${pkgname}*.rpm || true
        fpm -s dir -t rpm -n $pkgname -v $version -C $DESTDIR usr
        rm -rf $DESTDIR
        ;;
    osx*) echo "Here we would generate a dmg, or something :-)"
        ;;
    esac
}

do_uninstall_deps() {
    case $_os in
    ubu*)
        if test -x /usr/local/bin/fpm
        then
            sudo gem uninstall fpm -x
            sudo rm -f /usr/local/bin/fpm
        fi

        sudo apt-get autoremove -y --purge autopoint texinfo
        ;;
    esac
}

case $1 in
install_deps)   do_install_deps ;;
configure)      do_configure ;;
compile)        do_compile ;;
check)          do_check ;;
package)        do_package ;;
uninstall_deps) do_uninstall_deps ;;
steps)          echo "install_deps configure compile check package uninstall_deps";;
*)              echo "Unknown step $1"; usage;;
esac
