#!/bin/sh
# Build shim for zlib, a library that uses CMake as a build system
#
# Build shims are short, stupid, useable, and readable.
# They provide a uniform interface to building/testing/packaging projects,
# whether they are built with make, ant, or need no compilation at all.
# They are meant to be run by buildbot, jenkins, or developers interchangably.

set -e
set -x

SRCFILE=`readlink $0 2>/dev/null || echo $0`
SRC=`dirname $SRCFILE`
SRC=`cd $SRC; pwd`
case "$OS" in
Windows_NT)
    WSRC=`cygpath -w $SRC`
    # Work around http://www.cmake.org/Bug/print_bug_page.php?bug_id=13131
    unset TMP TEMP
    ;;
esac

# Parse the version number of this product from the source tree
get_version() {
    # Only look at top few lines
    # Remove comments
    # Grab just the call to set(VERSION ...)
    # delete everything up to and including VERSION
    # and remove parens and spaces

    head -n 20 CMakeLists.txt |
        sed 's/#.*//' |
        tr '\012)' ' \012' |
        grep 'set(VERSION' |
        sed 's/.*VERSION//' |
        tr -d '") '
}
version=`get_version`
pkgname=zlib
echo "This is $pkgname version $version"

# This may need adjusting for non-x86 architecuters
ncores=`grep -c processor /proc/cpuinfo || echo 1`
parallel="-j$ncores -l$ncores"
# If ccache is configured, use it.
if ccache -V && test "$CCACHE_DIR"
then
    CC="ccache gcc"
    CXX="ccache g++"
else
    CC=gcc
    CXX=g++
fi
export CC
export CXX

do_install_deps() {
    sudo apt-get -y install cmake

    if ! test -x /usr/local/bin/fpm
    then
        sudo apt-get install -y build-essential libopenssl-ruby ruby-dev rubygems
        # Need to set umask, or /var/lib/gems won't be world-readable
        # See https://bugs.launchpad.net/ubuntu/+source/rubygems/+bug/1023836
        umask 022
        sudo gem install fpm
        if ! test -x /usr/local/bin/fpm
        then
            if ! test -x /var/lib/gems/*/bin/fpm
            then
                echo fpm failed to install
                exit 1
            fi
            sudo ln -s /var/lib/gems/*/bin/fpm /usr/local/bin/fpm
        fi
    fi
}

do_configure() {
    case "$OS" in
    Windows_NT)
        cmd /c $WSRC\\bconfigure.bat
        ;;
    *)
        mkdir btmp
        cd btmp
        cmake ..
        cd ..
        ;;
    esac
}

do_compile() {
    case "$OS" in
    Windows_NT)
        cmd /c $WSRC\\bcompile.bat
        ;;
    *)
        cd btmp
        make $parallel
        cd ..
        ;;
    esac
}

do_check() {
    case "$OS" in
    Windows_NT)
        rm -f btmp/Testing/Temporary/LastTestsFailed.log
        cmd /c $WSRC\\bcheck.bat
        cat btmp/Testing/Temporary/LastTest.log
        if test -f btmp/Testing/Temporary/LastTestsFailed.log
        then
            echo tests failed
        fi
        ;;
    *)
        cd btmp
        make $parallel test
        cd ..
        ;;
    esac
}

do_package() {
    cd ../tmp/build-$pkgname

    # In this example, we pretend zlib is a proprietary app that needs
    # to be built once as a portable binary, and packaged twice, once
    # as .deb and once as .rpm.
    # There are several ways to improve portability of Linux binaries;
    # the easiest one is to compile on an oldish Linux to make sure the
    # glibc you statically link to is no newer than on the target systems.
    # You may also want to use the LSB Application Checker to check for 
    # portability problems.

    DESTDIR=../tmp/fpm-installroot.$$
    mkdir -p $DESTDIR
    DESTDIR=`cd $DESTDIR; pwd`
    make install DESTDIR=$DESTDIR
    rm -f ${pkgname}*.deb || true
    fpm -s dir -t deb -n $pkgname -v $version -C $DESTDIR usr
    rm -f ${pkgname}*.rpm || true
    fpm -s dir -t rpm -n $pkgname -v $version -C $DESTDIR usr
    rm -rf $DESTDIR
}

do_uninstall_deps() {
    if test -x /usr/local/bin/fpm
    then
        sudo gem uninstall fpm -x
        sudo rm -f /usr/local/bin/fpm
    fi

    sudo apt-get autoremove -y --purge cmake
}

case $1 in
install_deps)   do_install_deps ;;
configure)      do_configure ;;
compile)        do_compile ;;
check)          do_check ;;
package)        do_package ;;
uninstall_deps) do_uninstall_deps ;;
steps)          echo "install_deps configure compile check package uninstall_deps";;
*)              echo "Unknown step $1" ;;
esac
