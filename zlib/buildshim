#!/bin/sh

usage() {
cat << _EOF_
Buildshim for zlib, a library that uses CMake as a build system
Usage:
    ./buildshim install_deps
    ./buildshim configure
    ./buildshim compile
    ./buildshim check
    ./buildshim package
    ./buildshim uninstall_deps
_EOF_
}

abort() {
    echo fatal error: $*
    exit 1
}

detect_os() {
    # Detect OS
    case "`uname -s`" in
    Linux)
        case "`lsb_release -ds`" in
        "Ubuntu 10.04"*) echo ubu1004;;
        "Ubuntu 12.04"*) echo ubu1204;;
        *) abort "unrecognized linux";;
        esac
        ;;
    Darwin)
        case `sw_vers -productVersion` in
        10.7.*) echo osx107;;
        *) abort "unrecognized mac";;
        esac
        ;;
    CYGWIN*WOW64) echo cygwin;;
    CYGWIN*)      echo cygwin;;
    *) abort "unrecognized os";;
    esac
}

# Parse the version number of this product from the source tree
get_version() {
    # Only look at top few lines
    # Remove comments
    # Grab just the call to set(VERSION ...)
    # delete everything up to and including VERSION
    # and remove parens and spaces

    head -n 20 CMakeLists.txt |
        sed 's/#.*//' |
        tr '\012)' ' \012' |
        grep 'set(VERSION' |
        sed 's/.*VERSION//' |
        tr -d '") '
}

set -e
set -x

# Where this script really lives
SRCFILE=`readlink $0 2>/dev/null || echo $0`
SRC=`dirname $SRCFILE`
# Get an absolute directory (for the case where it's run with 'sh buildslave')
SRC=`cd $SRC; pwd`

pkgname=zlib
version=`get_version`
_os=`detect_os`
echo "This is $pkgname version $version, building on $_os"

# Apply workarounds
case $_os in
cygwin)
    WSRC=`cygpath -w $SRC`
    # Work around http://www.cmake.org/Bug/print_bug_page.php?bug_id=13131
    unset TMP TEMP tmp temp
    export TMP=c:\\windows\\temp
    export TEMP=c:\\windows\\temp
    ;;
esac

# This may need adjusting for non-x86 architecuters
ncores=`grep -c processor /proc/cpuinfo || echo 1`
parallel="-j$ncores -l$ncores"

case $_os in
cygwin)
    # On Windows, we're building with Visual C++, which doesn't support ccache.
    unset CCACHE_DIR
    ;;
ubu*)
    # If ccache is configured, use it.
    if ccache -V && test -d "$CCACHE_DIR"
    then
        CC="ccache gcc"
        CXX="ccache g++"
    else
        CC=gcc
        CXX=g++
    fi
    export CC
    export CXX
    ;;
osx*)
    : # No idea how to use ccache with xcode, if at all 
esac

do_install_deps() {
    case $_os in
    cygwin)
        apt-cyg install cmake
        ;;
    ubu*)
        sudo apt-get -y install cmake

        if ! test -x /usr/local/bin/fpm
        then
            sudo apt-get install -y build-essential libopenssl-ruby ruby-dev rubygems
            # Need to set umask, or /var/lib/gems won't be world-readable
            # See https://bugs.launchpad.net/ubuntu/+source/rubygems/+bug/1023836
            umask 022
            sudo gem install fpm
            if ! test -x /usr/local/bin/fpm
            then
                if ! test -x /var/lib/gems/*/bin/fpm
                then
                    echo fpm failed to install
                    exit 1
                fi
                sudo ln -s /var/lib/gems/*/bin/fpm /usr/local/bin/fpm
            fi
        fi
        ;;
    osx*)
        sudo port install cmake
        ;;
    *) abort "Unsupported OS $_os";;
    esac
}

do_configure() {
    case "$_os" in
    cygwin)
        cmd /c $WSRC\\bconfigure.bat
        ;;
    ubu*)
        mkdir btmp
        cd btmp
        cmake ..
        cd ..
        ;;
    osx*)
        mkdir btmp
        cd btmp
        cmake -G Xcode ..
        cd ..
        ;;
    esac
}

do_compile() {
    case "$_os" in
    Windows_NT)
        cmd /c $WSRC\\bcompile.bat
        ;;
    ubu*)
        cd btmp
        make $parallel
        cd ..
        ;;
    osx*)
        cd btmp
        xcodebuild -project zlib.xcodeproj -configuration Release
        cd ..
        ;;
    esac
}

do_check() {
    case "$_os" in
    Windows_NT)
        rm -f btmp/Testing/Temporary/LastTestsFailed.log
        cmd /c $WSRC\\bcheck.bat
        cat btmp/Testing/Temporary/LastTest.log
        if test -f btmp/Testing/Temporary/LastTestsFailed.log
        then
            echo tests failed
        fi
        ;;
    ubu*)
        cd btmp
        make $parallel test
        cd ..
        ;;
    osx*)
        abort no check yet
    esac
}

do_package() {
    # In this example, we pretend zlib is a proprietary library that needs
    # to be built once as a portable shared library, and packaged multiple times,
    # once in each supported package format.

    # There are several ways to improve portability of Linux binaries;
    # the easiest one is to compile on an oldish Linux to make sure the
    # glibc you statically link to is no newer than on the target systems.
    # You may also want to use the LSB Application Checker to check for
    # portability problems.

    cd btmp
    DESTDIR=../../tmp/fpm-installroot.$$
    # Clean up empty directories from failed builds
    rmdir ../../fpm-installroot* || true
    mkdir -p $DESTDIR
    DESTDIR=`cd $DESTDIR; pwd`
    case $_os in
    cygwin) echo "Here we would generate a .msi package, or something :-)"
        ;;
    ubu*)
        make install DESTDIR=$DESTDIR
        rm -f ${pkgname}*.deb || true
        fpm -s dir -t deb -n $pkgname -v $version -C $DESTDIR usr
        rm -f ${pkgname}*.rpm || true
        fpm -s dir -t rpm -n $pkgname -v $version -C $DESTDIR usr
        rm -rf $DESTDIR
        ;;
    osx*) echo "Here we would generate a .dmg package, or something :-)"
        ;;
    esac
}

do_uninstall_deps() {
    case $_os in
    ubu*)
        if test -x /usr/local/bin/fpm
        then
            sudo gem uninstall fpm -x
            sudo rm -f /usr/local/bin/fpm
        fi

        sudo apt-get autoremove -y --purge cmake
        ;;
    esac
}

case $1 in
install_deps)   do_install_deps ;;
configure)      do_configure ;;
compile)        do_compile ;;
check)          do_check ;;
package)        do_package ;;
uninstall_deps) do_uninstall_deps ;;
steps)          echo "install_deps configure compile check package uninstall_deps";;
*)              echo "Unknown step $1" ;;
esac
